#!/usr/bin/env python3
import json
import os
import re
import time

# Ensure repo root on path
import sys

ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

from bin.core import BASE, get_logger, guard_system, load_config, log_state, single_lock  # noqa: E402


def load_blog_cfg():
    p = os.path.join(BASE, "conf", "blog.yaml")
    if not os.path.exists(p):
        p = os.path.join(BASE, "conf", "blog.example.yaml")
    import yaml

    return yaml.safe_load(open(p, "r", encoding="utf-8"))


def choose_script_for_topic(topic):
    sdir = os.path.join(BASE, "scripts")
    cand = [f for f in os.listdir(sdir) if f.endswith(".txt")]
    cand.sort(reverse=True)
    for fn in cand:
        if re.sub(r"[^a-z0-9]+", "-", topic.lower()) in fn.lower():
            return os.path.join(sdir, fn)
    return os.path.join(sdir, cand[0]) if cand else None


log = get_logger("blog_generate_post")


def main():
    cfg = load_config()
    guard_system(cfg)
    bcfg = load_blog_cfg()
    work = os.path.join(BASE, "data", "cache", "blog_topic.json")
    if not os.path.exists(work):
        log_state("blog_generate_post", "SKIP", "no topic")
        print("No topic")
        return
    topic = json.load(open(work, "r", encoding="utf-8")).get("topic", "AI tools that save time")
    sfile = choose_script_for_topic(topic)
    if not sfile:
        log_state("blog_generate_post", "SKIP", "no scripts")
        print("No scripts")
        return
    text = open(sfile, "r", encoding="utf-8").read()
    # Minimal rewrite: convert to markdown using tone and word bounds
    tone = "informative"
    try:
        tone = getattr(cfg, "blog", None) and getattr(cfg.blog, "tone", "informative") or "informative"
    except Exception:
        pass
    target_words = 900
    try:
        mn = getattr(cfg.blog, "min_words", 800)
        mx = getattr(cfg.blog, "max_words", 1500)
        target_words = int((mn + mx) / 2)
    except Exception:
        pass
    intro = text.splitlines()[0:20]
    md = (
        f"# {topic}\n\n"
        f"> {tone.title()} article generated from the video script on {time.strftime('%Y-%m-%d')}.\n\n"
        f"## Introduction\n\n"
        + "\n".join(intro)[:600]
        + "\n\n## Key Points\n\n- Point A\n- Point B\n- Point C\n\n"
        + "## FAQ\n\n- **Q:** What is this?\n  **A:** Auto-generated blog draft.\n\n"
        + "## Conclusion\n\nThanks for reading."
    )
    out_md = os.path.join(BASE, "data", "cache", "post.md")
    meta = {
        "title": topic.title(),
        "slug": re.sub(r"[^a-z0-9]+", "-", topic.lower()).strip("-"),
        "description": f"Insights on {topic} generated by our automation pipeline.",
        "tags": ["automation", "raspberry pi", "ai"],
        "category": "AI Tools",
    }
    json.dump(
        meta,
        open(os.path.join(BASE, "data", "cache", "post.meta.json"), "w", encoding="utf-8"),
        indent=2,
    )
    open(out_md, "w", encoding="utf-8").write(md)
    log_state("blog_generate_post", "OK", os.path.basename(out_md))
    print(f"Wrote {out_md} and post.meta.json (placeholder).")


if __name__ == "__main__":
    with single_lock():
        main()
