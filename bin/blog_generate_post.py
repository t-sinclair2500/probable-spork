#!/usr/bin/env python3
import os, json, re, time
from bin.util import single_lock, log_state, load_global_config, BASE, ensure_dirs

def load_blog_cfg():
    p = os.path.join(BASE, "conf", "blog.yaml")
    if not os.path.exists(p):
        p = os.path.join(BASE, "conf", "blog.example.yaml")
    import yaml
    return yaml.safe_load(open(p, "r", encoding="utf-8"))

def choose_script_for_topic(topic):
    sdir = os.path.join(BASE,"scripts")
    cand = [f for f in os.listdir(sdir) if f.endswith(".txt")]
    cand.sort(reverse=True)
    for fn in cand:
        if re.sub(r'[^a-z0-9]+','-',topic.lower()) in fn.lower():
            return os.path.join(sdir, fn)
    return os.path.join(sdir, cand[0]) if cand else None

def main():
    cfg = load_global_config(); ensure_dirs(cfg)
    bcfg = load_blog_cfg()
    work = os.path.join(BASE,"data","cache","blog_topic.json")
    if not os.path.exists(work):
        log_state("blog_generate_post","SKIP","no topic"); print("No topic"); return
    topic = json.load(open(work,"r",encoding="utf-8")).get("topic","AI tools that save time")
    sfile = choose_script_for_topic(topic)
    if not sfile:
        log_state("blog_generate_post","SKIP","no scripts"); print("No scripts"); return
    text = open(sfile,"r",encoding="utf-8").read()
    # Minimal rewrite: convert to markdown with simple structure (placeholder).
    md = f"# {topic}\n\n" \
         f"> Generated from video script on {time.strftime('%Y-%m-%d')}.\n\n" \
         f"## Introduction\n\n" \
         f"{text[:600]}\n\n" \
         f"## Key Points\n\n- Point A\n- Point B\n- Point C\n\n" \
         f"## FAQ\n\n- **Q:** What is this?\n  **A:** Auto-generated blog draft.\n\n" \
         f"## Conclusion\n\nThanks for reading."
    out_md = os.path.join(BASE,"data","cache","post.md")
    meta = {
        "title": topic.title(),
        "slug": re.sub(r'[^a-z0-9]+','-', topic.lower()).strip('-'),
        "description": f"Insights on {topic} generated by our automation pipeline.",
        "tags": ["automation","raspberry pi","ai"],
        "category": "AI Tools"
    }
    json.dump(meta, open(os.path.join(BASE,"data","cache","post.meta.json"),"w",encoding="utf-8"), indent=2)
    open(out_md,"w",encoding="utf-8").write(md)
    log_state("blog_generate_post","OK", os.path.basename(out_md))
    print(f"Wrote {out_md} and post.meta.json (placeholder).")

if __name__ == "__main__":
    with single_lock():
        main()
