# Cursor Prompt Library â€” Branded Animatics Pipeline
# Generated: 2025-08-12 06:14:35Z UTC

## CONTEXT TO REVIEW (MANDATORY)
- Read repo_audit_probable_spork_v2.md top sections (Orchestrator, Acceptance).
- Open: conf/global.yaml, conf/render.yaml, conf/blog.yaml, conf/brief.yaml (or brief.md frontâ€‘matter).
- Inspect: bin/run_pipeline.py, bin/assemble_video.py, existing voice/acceptance steps.
- Use centralized names from sdk: SceneScript, Element, Keyframe, BrandStyle, Beat, Animatic Clip.

## WORKING FRAMEWORK â€” THINK â†’ PLAN â†’ APPLY â†’ VERIFY
- THINK: Summarize constraints, dependencies, and risks (â‰¤10 bullets). Reference this promptâ€™s RULES.
- PLAN: List exact files, functions, signatures, schemas; step-by-step edits; rollback.
- APPLY: Implement code, keep diffs small & cohesive; instrument logs.
- VERIFY: Run the Test Criteria commands and paste outputs + a date-stamped changelog at the bottom of the file.

ROLE: Validation engineer.

GOAL
- Provide a validator and a demo SceneScript fixture for development and tests.

RULES
- Validator must exit non-zero on schema violation and print first error.
- Fixtures must respect MAX_WORDS_PER_CARD and duration bounds (3â€“7s).

TASKS
1) `bin/cutout/validate_scenescript.py --in scenescripts/<slug>.json` â†’ validates against schema and prints summary.
2) `bin/cutout/make_fixture_scenes.py` â†’ writes `scenescripts/demo.json` with 6â€“10 scenes, various element types.

SUCCESS CRITERIA
- Demo file validates against schema; validator exits 0.
- Violating a key should exit 1 with an actionable message.

TEST CRITERIA
python bin/cutout/make_fixture_scenes.py
python bin/cutout/validate_scenescript.py --in scenescripts/demo.json

## CHANGELOG - Prompt02 Implementation

**Date: 2025-01-27 15:30 UTC**
**Agent: Claude Sonnet 4**
**Task: SceneScript Validator & Fixture Generator**

### âœ… COMPLETED
- **Created `bin/cutout/validate_scenescript.py`** - Full validation script with JSON schema validation and business rules
- **Created `bin/cutout/make_fixture_scenes.py`** - Fixture generator creating demo SceneScript with 6 scenes
- **Updated `schema/scenescript.json`** - Made optional fields nullable to match Pydantic model behavior
- **Created `scenescripts/` directory** - For storing SceneScript files
- **Implemented comprehensive validation** - Schema validation, business rules (duration 3-7s, word limits â‰¤12)
- **Proper error handling** - Exit codes 0 for valid, 1 for invalid with actionable error messages
- **Test coverage** - Validated all error scenarios: schema violations, business rule violations, file not found, invalid JSON

### ðŸ”§ TECHNICAL DETAILS
- Validator uses `jsonschema` library for JSON schema validation
- Business rules enforce 3000-7000ms duration bounds and MAX_WORDS_PER_CARD limit
- Fixture generates realistic scenes with various element types: text, character, prop, shape, counter, list_step, lower_third
- All scripts use proper logging and error handling
- Schema updated to allow nullable fields matching Pydantic model behavior

### ðŸ“Š TEST RESULTS
- âœ… `python3 bin/cutout/make_fixture_scenes.py` - Successfully generates demo.json
- âœ… `python3 bin/cutout/validate_scenescript.py --in scenescripts/demo.json` - Validates successfully
- âœ… Error handling tested for schema violations, business rules, file not found, and invalid JSON
- âœ… All validation scenarios exit with appropriate error codes and messages
