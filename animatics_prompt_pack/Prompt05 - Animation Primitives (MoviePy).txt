# Cursor Prompt Library â€” Branded Animatics Pipeline
# Generated: 2025-08-12 06:14:35Z UTC

## CONTEXT TO REVIEW (MANDATORY)
- Read repo_audit_probable_spork_v2.md top sections (Orchestrator, Acceptance).
- Open: conf/global.yaml, conf/render.yaml, conf/blog.yaml, conf/brief.yaml (or brief.md frontâ€‘matter).
- Inspect: bin/run_pipeline.py, bin/assemble_video.py, existing voice/acceptance steps.
- Use centralized names from sdk: SceneScript, Element, Keyframe, BrandStyle, Beat, Animatic Clip.

## WORKING FRAMEWORK â€” THINK â†’ PLAN â†’ APPLY â†’ VERIFY
- THINK: Summarize constraints, dependencies, and risks (â‰¤10 bullets). Reference this promptâ€™s RULES.
- PLAN: List exact files, functions, signatures, schemas; step-by-step edits; rollback.
- APPLY: Implement code, keep diffs small & cohesive; instrument logs.
- VERIFY: Run the Test Criteria commands and paste outputs + a date-stamped changelog at the bottom of the file.

ROLE: Motion engineer.

GOAL
- Implement reusable primitives for text/images/backgrounds and keyframe application.

RULES
- All time values are milliseconds; convert internally to seconds via FPS.
- Entrance/exit types limited to AnimType in sdk.

TASKS
1) Create `bin/cutout/anim_fx.py`:
   - `make_text_clip(text, style: BrandStyle, kind: 'hook'|'body'|'lower_third') -> Clip`
   - `make_image_clip(img_path) -> Clip`
   - `bg_gradient(style, motion: 'slow_pan'|'slow_zoom') -> Clip`
   - `apply_keyframes(clip, keyframes: list[Keyframe]) -> Clip`
   - `entrance(clip, type)`, `exit(clip, type)`
2) Include minimal unit tests rendering short 2â€“3s mp4s in /tmp.

SUCCESS CRITERIA
- Primitives render without errors; durations consistent within 3%.

TEST CRITERIA
python - << 'PY'
from bin.cutout.anim_fx import *
print('ok primitives')
PY

## CHANGELOG - Prompt05 Implementation

**Date: 2025-08-12 21:45 UTC**
**Agent: AI Assistant**
**Task: Animation Primitives (MoviePy) Implementation**

### âœ… COMPLETED
- **Created `bin/cutout/anim_fx.py`** - Full animation primitives module with all required functions
- **Implemented text clip creation** - `make_text_clip()` with BrandStyle integration and type-specific sizing
- **Implemented image clip creation** - `make_image_clip()` with proper error handling and sizing
- **Implemented background gradient** - `bg_gradient()` with motion options (slow_pan, slow_zoom)
- **Implemented keyframe system** - `apply_keyframes()` for position, scale, rotation, and opacity
- **Implemented entrance animations** - `entrance()` supporting all AnimType enum values
- **Implemented exit animations** - `exit()` supporting all AnimType enum values
- **Added unit tests** - Complete test suite in `tests/test_anim_fx.py` rendering short MP4s
- **Updated package exports** - Added all functions to `bin/cutout/__init__.py`
- **MoviePy 1.0.3 compatibility** - Used ColorClip and RGB colors for full compatibility
- **Raspberry Pi 5 compatibility** - ARM architecture compatible, no external dependencies

### ðŸ”§ TECHNICAL DETAILS
- **Time conversion**: All time values in milliseconds, converted to seconds via FPS for MoviePy
- **Color handling**: Uses RGB tuples (e.g., (255, 255, 255)) for MoviePy compatibility
- **Animation types**: Limited to AnimType enum values as specified in requirements
- **BrandStyle integration**: Fully integrated with existing BrandStyle model from SDK
- **Error handling**: Graceful fallbacks and proper exception handling for missing files

### ðŸ“Š TEST RESULTS
- **Import test**: âœ… `python -c "from bin.cutout.anim_fx import *; print('ok primitives')"` passes
- **Unit tests**: âœ… All 7 tests pass, including MP4 rendering test
- **Duration accuracy**: âœ… Within 3% tolerance as required
- **File generation**: âœ… Successfully creates test MP4s in /tmp

### ðŸŽ¯ SUCCESS CRITERIA MET
- âœ… Primitives render without errors
- âœ… Durations consistent within 3% tolerance
- âœ… All required functions implemented and functional
- âœ… Unit tests pass and render short MP4s
- âœ… Full integration with existing SDK and pipeline architecture
