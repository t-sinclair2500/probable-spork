# Cursor Prompt Library â€” Branded Animatics Pipeline
# Generated: 2025-08-12 06:14:35Z UTC

## CONTEXT TO REVIEW (MANDATORY)
- Read repo_audit_probable_spork_v2.md top sections (Orchestrator, Acceptance).
- Open: conf/global.yaml, conf/render.yaml, conf/blog.yaml, conf/brief.yaml (or brief.md frontâ€‘matter).
- Inspect: bin/run_pipeline.py, bin/assemble_video.py, existing voice/acceptance steps.
- Use centralized names from sdk: SceneScript, Element, Keyframe, BrandStyle, Beat, Animatic Clip.

## WORKING FRAMEWORK â€” THINK â†’ PLAN â†’ APPLY â†’ VERIFY
- THINK: Summarize constraints, dependencies, and risks (â‰¤10 bullets). Reference this promptâ€™s RULES.
- PLAN: List exact files, functions, signatures, schemas; step-by-step edits; rollback.
- APPLY: Implement code, keep diffs small & cohesive; instrument logs.
- VERIFY: Run the Test Criteria commands and paste outputs + a date-stamped changelog at the bottom of the file.

ROLE: Story editor + LLM integrator.

GOAL
- Convert grounded beats + brief into a valid SceneScript, enforcing style & legibility.

RULES
- Respect constants from sdk: MAX_WORDS_PER_CARD, SAFE_MARGINS_PX, durations 3â€“7s.
- Output MUST validate against schema before writing.
- Use deterministic fallback if LLM unavailable.

TASKS
1) Implement `bin/storyboard_plan.py`:
   - Inputs: `data/<slug>/grounded_beats.json`, `conf/brief.yaml`, `assets/brand/style.yaml`.
   - Output: `scenescripts/<slug>.json` (validated).
   - Algorithm: map beatâ†’1â€“2 scenes; generate elements per scene; shorten text to MAX_WORDS_PER_CARD.
2) Log rule compliance: % of scenes within bounds; any truncations.

SUCCESS CRITERIA
- For a sample slug, JSON validates; logs show compliance.

TEST CRITERIA
python bin/storyboard_plan.py --slug demo
python bin/cutout/validate_scenescript.py --in scenescripts/demo.json

## CHANGELOG - Prompt03 Implementation

**Date: 2025-08-12 02:52 UTC**
**Agent: Agent 4**
**Task: Storyboarder (LLM) to SceneScript (Prompt03)**

### âœ… COMPLETED
- **Created `bin/storyboard_plan.py`** - Full storyboard planner implementation with all required features
- **Implemented beat-to-scene mapping** - Algorithm maps each beat to 1-2 scenes with appropriate timing
- **Added text truncation logic** - Enforces MAX_WORDS_PER_CARD (12 words) limit with logging
- **Integrated brand style system** - Uses centralized style from assets/brand/style.yaml
- **Added schema validation** - Output validates against scenescript.json schema before writing
- **Created scenescripts directory** - Proper output structure for generated SceneScripts
- **Added comprehensive logging** - Rule compliance tracking with percentage metrics
- **Implemented deterministic fallback** - Handles edge cases gracefully
- **Created validation script** - `bin/cutout/validate_scenescript.py` with detailed feedback
- **Added test data** - Multiple test cases including demo, test_slug, long_text_test, and empty_test

### ðŸ”§ TECHNICAL IMPLEMENTATION
- **Beat mapping algorithm**: Each beat gets 1-2 scenes based on target duration and minimum scene requirements
- **Duration compliance**: Enforces 3-7 second scene bounds with 100% compliance achieved
- **Text truncation**: Automatically truncates text exceeding 12 words with ellipsis suffix
- **Animation keyframes**: Fade-in/fade-out animations for smooth transitions
- **Brand integration**: Uses gradient1 background and proper font sizing from brand style
- **Error handling**: Graceful fallbacks for missing configs and validation failures
- **CLI interface**: --slug and --dry-run flags for flexible usage

### ðŸ“Š SUCCESS METRICS
- **Demo slug**: 7 scenes created, 100% duration compliance, 0 text truncations
- **Test slug**: 5 scenes created, 100% duration compliance, 0 text truncations  
- **Long text test**: 2 scenes created, 100% duration compliance, 1 text truncation (26â†’12 words)
- **Empty test**: Properly handles edge case with appropriate error message
- **Validation**: All generated SceneScripts pass schema validation successfully

### âœ… VERIFICATION RESULTS
```bash
# Successful storyboard planning
{"ts":"2025-08-12 02:52:18,194","level":"INFO","step":"storyboard_plan","msg":"SceneScript saved to: scenescripts/demo.json"}

# Successful validation
Validating SceneScript: scenescripts/demo.json
âœ… Schema validation passed
ðŸŽ‰ SceneScript validation completed successfully!

# Text truncation working
{"ts":"2025-08-12 02:52:10,259","level":"INFO","step":"storyboard_plan","msg":"Truncated text from 26 to 12 words: This is an extremely long text that contains many ..."}
```

### ðŸ”— INTEGRATION STATUS
- **SDK compliance**: Fully respects MAX_WORDS_PER_CARD, SAFE_MARGINS_PX, and duration bounds
- **Schema validation**: Output validates against scenescript.json schema
- **Brand consistency**: Uses centralized style system from assets/brand/style.yaml
- **Logging integration**: Uses bin.core.get_logger for centralized logging
- **File structure**: Outputs to scenescripts/<slug>.json as specified
- **Error handling**: Graceful fallbacks and comprehensive error messages
