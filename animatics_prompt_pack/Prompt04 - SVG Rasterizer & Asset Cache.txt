# Cursor Prompt Library — Branded Animatics Pipeline
# Generated: 2025-08-12 06:14:35Z UTC

## CONTEXT TO REVIEW (MANDATORY)
- Read repo_audit_probable_spork_v2.md top sections (Orchestrator, Acceptance).
- Open: conf/global.yaml, conf/render.yaml, conf/blog.yaml, conf/brief.yaml (or brief.md front‑matter).
- Inspect: bin/run_pipeline.py, bin/assemble_video.py, existing voice/acceptance steps.
- Use centralized names from sdk: SceneScript, Element, Keyframe, BrandStyle, Beat, Animatic Clip.

## WORKING FRAMEWORK — THINK → PLAN → APPLY → VERIFY
- THINK: Summarize constraints, dependencies, and risks (≤10 bullets). Reference this prompt’s RULES.
- PLAN: List exact files, functions, signatures, schemas; step-by-step edits; rollback.
- APPLY: Implement code, keep diffs small & cohesive; instrument logs.
- VERIFY: Run the Test Criteria commands and paste outputs + a date-stamped changelog at the bottom of the file.

ROLE: Graphics pipeline engineer.

GOAL
- Efficiently rasterize SVGs and cache results for reuse.

RULES
- Cache key = (svg_path, width, height, file mtime).
- Use cairosvg (preferred). Fallback to rsvg-convert, then Pillow.

TASKS
1) Create `bin/cutout/raster_cache.py` with:
   - `rasterize_svg(svg_path, px_w, px_h) -> path`
   - `get_cached(svg_path, px_w, px_h) -> path`
   - Simple disk cache in `render_cache/`.
2) Unit tests for cache hits/misses.

SUCCESS CRITERIA
- Subsequent calls hit cache; first call renders.

TEST CRITERIA
python - << 'PY'
from bin.cutout.raster_cache import rasterize_svg
print(rasterize_svg('assets/brand/props/blanket.svg',512,512))
print(rasterize_svg('assets/brand/props/blanket.svg',512,512))
PY
